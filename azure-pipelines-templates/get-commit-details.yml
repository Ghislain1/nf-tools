# Copyright (c) .NET Foundation and Contributors
# See LICENSE file in the project root for full license information.

steps:

# get commit message
- powershell: |

    if($env:System_PullRequest_PullRequestId -ne $null)
    {
        # PR build, get PR message
        Write-Host "Build from PR"

        $commit = Invoke-RestMethod -Uri "https://api.github.com/repos/$env:Build_Repository_Name/pulls/$env:System_PullRequest_PullRequestNumber" -ContentType "application/json" -Method GET

        $commitMessage = $commit.body
    }
    else
    {
        # build NOT from PR
        Write-Host "Build NOT from PR, commit ID: $env:Build_SourceVersion"
   
        # need to wrap this in a try/catch because PR doesn't always exist
        try
        {
            # get PR associate with commit
            $prUrl = "https://api.github.com/repos/$env:Build_Repository_Name/commits/$env:Build_SourceVersion/pulls"

            $commit = Invoke-RestMethod -Uri $prUrl -ContentType "application/json" -Headers @{Accept = "application/vnd.github.groot-preview+json"}  -Method GET

            if($commit -ne $null)
            {
                # merged from a PR, check if changes were for unit tests only
                $labelsCount = [int]$commit.labels.count
                
                if($labelsCount -eq 1)
                {
                    $unitTestsLabel = $commit.labels | where {$_.Name -eq 'Type: Unit Tests'}
                    
                    if($unitTestsLabel -ne $null)
                    {
                        # Unit Test work only, skip build
                        echo "##vso[task.setvariable variable=SKIP_BUILD;isOutput=true]true"
            
                        Write-Host "Unit Tests changes only, skipping build."
                        
                        # done here
                        Return
                    }
                }
            }
        }
        catch
        {}

        # get subject and commit message for commit
        $commitMessage = git log --format='%B' -1
    }

    # handle empty commit message
    if($null -eq $commitMessage)
    {
        $commitMessage = ""
    }

    # need to flatten message by removing new lines
    $commitMessage = $commitMessage.Replace("`r`n", " ").Replace("`r", " ").Replace("`n", " ")

    "Flattened commit message is: '$commitMessage'" | Write-Host

    # set variable to forward to jobs
    echo "##vso[task.setvariable variable=COMMIT_MESSAGE;isOutput=true]$commitMessage"

  name: GetCommitDetails
  displayName: Grab commit details
  condition: >-
    and(
      succeeded(),
      not(startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
    )
